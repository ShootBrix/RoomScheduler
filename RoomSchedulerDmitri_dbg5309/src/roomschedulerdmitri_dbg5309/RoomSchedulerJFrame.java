/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package roomschedulerdmitri_dbg5309;

import java.sql.Date;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

public class RoomSchedulerJFrame extends javax.swing.JFrame {

    public RoomSchedulerJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        addFacultyNameTextField = new javax.swing.JTextField();
        addFacultyButton = new javax.swing.JButton();
        addFacultyStatusLabel = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        dateJSpinner = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        addDateJButton = new javax.swing.JButton();
        addDateJLable = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        roomNameTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        roomSeatsTextField = new javax.swing.JTextField();
        addRoomJButton = new javax.swing.JButton();
        dropRoomJButton = new javax.swing.JButton();
        dropRoomJComboBox = new javax.swing.JComboBox<>();
        addDropJLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        roomReservationFacultyComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        roomReservationDateComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        roomReservationSeatsTextField = new javax.swing.JTextField();
        roomReservationSubmitButton = new javax.swing.JButton();
        roomReservationLabel = new javax.swing.JLabel();
        cancelReservationJButton = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        reservationStatusComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        reservationStatusTable = new javax.swing.JTable();
        reservationStatusButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        waitlistStatusTable = new javax.swing.JTable();
        waitlistStatusButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        reservationFacultyJTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        waitlistFacultyJTable = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        statusFacultyJComboBox = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        facultyStatusJButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 51, 51));
        jLabel1.setText("Room Scheduler");

        jLabel2.setText("Faculty Name:");

        addFacultyNameTextField.setColumns(20);

        addFacultyButton.setText("Submit");
        addFacultyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFacultyButtonActionPerformed(evt);
            }
        });

        addFacultyStatusLabel.setText("     ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addFacultyNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(addFacultyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(addFacultyStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(221, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(addFacultyNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addFacultyButton))
                .addGap(18, 18, 18)
                .addComponent(addFacultyStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(277, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Add Faculty", jPanel1);

        dateJSpinner.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.DAY_OF_WEEK_IN_MONTH));

        jLabel7.setText("Pick a Date to add:");

        addDateJButton.setText("Add to DataBase");
        addDateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDateJButtonActionPerformed(evt);
            }
        });

        jLabel11.setText("(Double click on field you want to change)");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addDateJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dateJSpinner)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(addDateJLable, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(185, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(22, 22, 22)
                .addComponent(addDateJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addDateJLable, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(168, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Add Date", jPanel5);

        jLabel14.setText("Room name:");

        jLabel12.setText("Number of seats:");

        addRoomJButton.setText("Add Room");
        addRoomJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoomJButtonActionPerformed(evt);
            }
        });

        dropRoomJButton.setText("Drop Room");
        dropRoomJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropRoomJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(addDropJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addRoomJButton)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(roomSeatsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(roomNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(181, 181, 181)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(dropRoomJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dropRoomJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap(103, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(roomNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dropRoomJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(roomSeatsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dropRoomJButton))
                .addGap(18, 18, 18)
                .addComponent(addRoomJButton)
                .addGap(18, 18, 18)
                .addComponent(addDropJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(161, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Add/Drop Room", jPanel7);

        jLabel3.setText("Faculty:");

        roomReservationFacultyComboBox.setSelectedItem(Faculty.getFacultyList());
        roomReservationFacultyComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomReservationFacultyComboBoxActionPerformed(evt);
            }
        });

        jLabel4.setText("Date:");

        jLabel5.setText("Seats Required:");

        roomReservationSubmitButton.setText("Make Reservation");
        roomReservationSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomReservationSubmitButtonActionPerformed(evt);
            }
        });

        cancelReservationJButton.setText("Cancel Reservation");
        cancelReservationJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelReservationJButtonActionPerformed(evt);
            }
        });

        jLabel13.setText("(All fields required)");

        jLabel15.setText("(Only Faculty and Date required)");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(56, 56, 56)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(roomReservationFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(roomReservationDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(roomReservationSeatsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(roomReservationSubmitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(126, 126, 126)))))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cancelReservationJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(roomReservationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(roomReservationFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(roomReservationDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelReservationJButton))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(roomReservationSeatsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(roomReservationSubmitButton))
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addGap(18, 18, 18)
                .addComponent(roomReservationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(140, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Make/Cancel Reservation", jPanel2);

        jLabel6.setText("Select Date: ");

        reservationStatusTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(reservationStatusTable);

        reservationStatusButton.setText("Show reservations");
        reservationStatusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservationStatusButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(reservationStatusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(reservationStatusButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reservationStatusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reservationStatusButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Reservations Status", jPanel3);

        jScrollPane2.setViewportView(waitlistStatusTable);

        waitlistStatusButton.setText("Show Full Waitlist");
        waitlistStatusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waitlistStatusButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(waitlistStatusButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(waitlistStatusButton)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Waitlists Status", jPanel4);

        reservationFacultyJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(reservationFacultyJTable);

        waitlistFacultyJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(waitlistFacultyJTable);

        jLabel8.setText("Pick Faculty:");

        statusFacultyJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusFacultyJComboBoxActionPerformed(evt);
            }
        });

        jLabel9.setText("Reservations:");

        jLabel10.setText("Waitlists:");

        facultyStatusJButton.setText("Show Status");
        facultyStatusJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                facultyStatusJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)
                                .addComponent(jScrollPane3))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(statusFacultyJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42)
                                .addComponent(facultyStatusJButton))))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(230, 230, 230)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(228, 228, 228)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(statusFacultyJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(facultyStatusJButton))
                .addGap(26, 26, 26)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Status by Faculty", jPanel6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(154, 154, 154)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane2))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addFacultyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFacultyButtonActionPerformed

        // store the text in a variable and clear text Field.
        String newItem = addFacultyNameTextField.getText();
        addFacultyNameTextField.setText("");

        // add to the faculty database and notify the user
        Faculty.addFaculty(newItem);
        addFacultyStatusLabel.setText(newItem + " was added to the faculy list.");

        // add the new faculty to the ComboBoxs
        roomReservationFacultyComboBox.addItem(newItem);
        statusFacultyJComboBox.addItem(newItem);


    }//GEN-LAST:event_addFacultyButtonActionPerformed

    private void roomReservationFacultyComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomReservationFacultyComboBoxActionPerformed

    }//GEN-LAST:event_roomReservationFacultyComboBoxActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        /*Comment out  after finish debugging*/
        //Enabel all combo boxes from the moment the program starts.
        ArrayList<String> faculties = Faculty.getFacultyList();
        for (String faculty : faculties) {
            roomReservationFacultyComboBox.addItem(faculty);
            statusFacultyJComboBox.addItem(faculty);
        }

        ArrayList<String> dates = Dates.getAllDates();
        for (String date : dates) {
            roomReservationDateComboBox.addItem(date);
            reservationStatusComboBox.addItem(date);
        }

        List<String> rooms = RoomQueries.getAllRooms();
        for (String room : rooms) {
            dropRoomJComboBox.addItem(room);
        }

    }//GEN-LAST:event_formWindowOpened

    private void roomReservationSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomReservationSubmitButtonActionPerformed

        //Take data from combo boxes and test field, store in variables
        String facultyName = (String) (roomReservationFacultyComboBox.getSelectedItem());
        String room;
        Date date = Date.valueOf(roomReservationDateComboBox.getSelectedItem().toString());
        String strSeats = roomReservationSeatsTextField.getText();
        int requiredSeats = Integer.parseInt(strSeats);
        Timestamp currentTimestamp = new Timestamp(Calendar.getInstance().getTime().getTime());

        //Evaluate the needed room
        room = RoomQueries.getBestFitRoom(requiredSeats);
        int bestSeats = RoomQueries.getSeats(room);

        //create object set to null
        ReservationQueries newReservation = null;
        try {
            newReservation = new ReservationQueries(new ReservationEntry(facultyName, room, date, bestSeats, currentTimestamp));
            if (!newReservation.reservationExists(date, room)) {
                newReservation.applyReservation();
                roomReservationLabel.setText("Reservation was made for "
                        + facultyName + ", in room " + room + " That contains " + bestSeats + " seats.");
            } else {
                newReservation = null;
            }
        } catch (SQLException ex) {
//            Logger.getLogger(RoomSchedulerJFrame.class.getName()).log(Level.SEVERE, null, ex);
            newReservation = null;
        }
        if (newReservation == null) {
            roomReservationLabel.setText("Could NOT make a reservation, adding " + facultyName + " to the Waitlist");

            //else put it in Waitlist DB
            WaitlistQueries newWaitlist = null;
            try {
                newWaitlist = new WaitlistQueries(new WaitlistEntry(facultyName, date, requiredSeats, currentTimestamp));
                newWaitlist.applyWaitlist();
            } catch (SQLException ex) {
//                Logger.getLogger(RoomSchedulerJFrame.class.getName()).log(Level.SEVERE, null, ex);
                roomReservationLabel.setText("This reservation for " + facultyName + " already in the Waitlist");
            }
        }
    }//GEN-LAST:event_roomReservationSubmitButtonActionPerformed

    private void reservationStatusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservationStatusButtonActionPerformed
        //Take table Module and create columns
        DefaultTableModel model = (DefaultTableModel) reservationStatusTable.getModel();
        if (model.getColumnCount() == 0) {
            addColumnsToTable(model, true);
        }

        //Before showing data, wipe all previous data
        model.getDataVector().removeAllElements();

        Date date = Date.valueOf(reservationStatusComboBox.getSelectedItem().toString());
        List<ReservationEntry> list = ReservationQueries.getReservationEntries(date);

        //if list not empty populate the table
        if (list.size() > 0) {
            for (ReservationEntry entry : list) {
                model.addRow(new Object[]{entry.getFaculty(), entry.getRoom(), entry.getDate(), entry.getSeats(), entry.getTimestamp()});
            }
        }

    }//GEN-LAST:event_reservationStatusButtonActionPerformed

    private void waitlistStatusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waitlistStatusButtonActionPerformed
        //Take table Module and create columns
        DefaultTableModel model = (DefaultTableModel) waitlistStatusTable.getModel();
        if (model.getColumnCount() == 0) {
            addColumnsToTable(model, false);
        }

        //Before showing data, wipe all previous data
        model.getDataVector().removeAllElements();

        WaitlistQueries waitlist = new WaitlistQueries();
        List<WaitlistEntry> list = waitlist.getWaitingListEntries();
        //if list not empty populate the table
        if (list.size() > 0) {
            for (WaitlistEntry entry : list) {
                model.addRow(new Object[]{entry.getFaculty(), entry.getDate(), entry.getSeats(), entry.getTimestamp()});
            }
        }

    }//GEN-LAST:event_waitlistStatusButtonActionPerformed

    private void addDateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDateJButtonActionPerformed
        SimpleDateFormat formater = new SimpleDateFormat("yyyy-MM-dd");
        String spinnerValue = formater.format(dateJSpinner.getValue());
        java.sql.Date date = Date.valueOf(spinnerValue);

        //create list of dates and loop to check if date already exists
        List<Date> dateList = Dates.getAllDatesAsDate();
        if (isDateExist(dateList, date)) {
            addDateJLable.setText("Date " + spinnerValue + " already exists and could NOT be added to database.");
        } else { //if not add new date
            Dates.addDate(date);
            roomReservationDateComboBox.addItem(spinnerValue);
            reservationStatusComboBox.addItem(spinnerValue);
            addDateJLable.setText("Date " + spinnerValue + " was successfully added to database.");
        }

    }//GEN-LAST:event_addDateJButtonActionPerformed
    //A function to loop through all dates and check if a certain date exists.
    private boolean isDateExist(List<Date> dateList, Date date) {
        for (java.sql.Date currentDate : dateList) {
            if (date.equals(currentDate)) {
                return true;
            }
        }
        return false;
    }
    private void statusFacultyJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusFacultyJComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_statusFacultyJComboBoxActionPerformed

    private void facultyStatusJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_facultyStatusJButtonActionPerformed
        String facultyName = (String) (statusFacultyJComboBox.getSelectedItem());

        //set columns
        DefaultTableModel modelW = (DefaultTableModel) waitlistFacultyJTable.getModel();
        if (modelW.getColumnCount() == 0) {
            addColumnsToTable(modelW, false);
        }
        //Before showing data, wipe all previous data
        modelW.getDataVector().removeAllElements();

        //set columns
        DefaultTableModel modelR = (DefaultTableModel) reservationFacultyJTable.getModel();
        if (modelR.getColumnCount() == 0) {
            addColumnsToTable(modelR, true);
        }
        //Before showing data, wipe all previous data
        modelR.getDataVector().removeAllElements();

        //populate the tables
        List<WaitlistEntry> list = WaitlistQueries.getWaitingListEntriesByFaculty(facultyName);

        if (list != null) {
            for (WaitlistEntry entry : list) {
                modelW.addRow(new Object[]{entry.getFaculty(), entry.getDate(), entry.getSeats(), entry.getTimestamp()});
            }
        }

        List<ReservationEntry> listR = ReservationQueries.getReservationEntriesByFaculty(facultyName);

        if (listR != null) {
            for (ReservationEntry entry : listR) {
                modelR.addRow(new Object[]{entry.getFaculty(), entry.getRoom(), entry.getDate(), entry.getSeats(), entry.getTimestamp()});
            }
        }
    }//GEN-LAST:event_facultyStatusJButtonActionPerformed

    private void cancelReservationJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelReservationJButtonActionPerformed
        String facultyName = (String) (roomReservationFacultyComboBox.getSelectedItem());
        String strDate = roomReservationDateComboBox.getSelectedItem().toString();
        Date date = Date.valueOf(strDate);

        try {
            ReservationEntry reservation = ReservationQueries.getExistingReservationEntryByFacultyAndDate(facultyName, date);

            //if reservations exists cancel it and find a waitlist faculty to replace
            if (reservation != null) {
                ReservationQueries.cancelReservationEntriesByFacultyAndDate(facultyName, date);
                roomReservationLabel.setText("Reservation for " + facultyName + " on " + strDate + " was canceled. ");

                WaitlistEntry entry = WaitlistQueries.getWaitingEntryByDateWithPriority(date);

                if (entry != null) {
                    String room = RoomQueries.getBestFitRoom(entry.getSeats());
                    int bestSeats = RoomQueries.getSeats(room);
                    ReservationQueries newRes = new ReservationQueries(
                            new ReservationEntry(entry.getFaculty(), reservation.getRoom(), date, bestSeats, entry.getTimestamp()));
                    newRes.applyReservation();

                    WaitlistQueries.deleteEntryFromWaitingList(entry);
                    roomReservationLabel.setText("Reservation for " + facultyName + " was canceled. "
                            + " A new reservation was made for " + entry.getFaculty() + " in " + reservation.getRoom());
                }
                //if faculty has a waitling reservations only cancel that
            } else {
                WaitlistEntry entry = WaitlistQueries.getWaitingEntryByDate(facultyName, date);
                if (entry != null) {
                    WaitlistQueries.deleteEntryFromWaitingList(entry);
                    roomReservationLabel.setText(facultyName + " waitlist reservation was canceled on " + strDate);
                } else {
                    roomReservationLabel.setText("There is no record of " + facultyName + " in Reservations or Waitlist.");
                }

            }
        } catch (SQLException ex) {
            Logger.getLogger(RoomSchedulerJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cancelReservationJButtonActionPerformed

    private void addRoomJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRoomJButtonActionPerformed
        String roomName = roomNameTextField.getText();
        String strSeats = roomSeatsTextField.getText();
        int seatsNumber = Integer.parseInt(strSeats);

        List<WaitlistEntry> listOfEntries = WaitlistQueries.getWaitingListEntriesWithPriority();
        List<String> rooms = RoomQueries.getAllRooms();

        //check if the room does not exists
        if (!isRoomExist(rooms, roomName)) {
            RoomEntry newRoomEntry = new RoomEntry(roomName, seatsNumber);
            RoomQueries.addRoom(newRoomEntry);
            dropRoomJComboBox.addItem(roomName);
            addDropJLabel.setText("Room " + roomName + " with " + strSeats + " seats, was added to database.");

            //If there is at least one waitlist entry loop through all of them and assign them possible rooms
            if (listOfEntries != null) {

                for (WaitlistEntry entry : listOfEntries) {
                    ReservationEntry reservation
                            = new ReservationEntry(entry.getFaculty(), roomName, entry.getDate(), entry.getSeats(), entry.getTimestamp());
                    if (createNewReservation(reservation) == true) {
                        try {
                            WaitlistQueries.deleteEntryFromWaitingList(entry);
                        } catch (SQLException ex) {
                            //Logger.getLogger(RoomSchedulerJFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
        } else {
            addDropJLabel.setText("This room already exists.");
        }

    }//GEN-LAST:event_addRoomJButtonActionPerformed
    //A function to loop through all rooms and check if a certain room exists.
    private boolean isRoomExist(List<String> rooms, String roomName) {
        for (String currentRoom : rooms) {
            if (roomName.equals(currentRoom)) {
                return true;
            }
        }
        return false;
    }
    private void dropRoomJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropRoomJButtonActionPerformed
        String roomName = (String) dropRoomJComboBox.getSelectedItem();

        try {
            //Delete foom from DB and combo box
            RoomQueries.deleteRoom(roomName);
            dropRoomJComboBox.removeItem(roomName);

            List<ReservationEntry> listReservations = ReservationQueries.getReservationEntriesByRoom(roomName);
            if (listReservations != null) {//if room has reservations, add the faculty to waitlist and try find them new room
                for (ReservationEntry reservation : listReservations) {
                    if (createNewReservation(reservation) == false) {
                        addToWaitingList(reservation);
                        ReservationQueries.cancelReservationEntriesByFacultyAndDate(reservation.getFaculty(), reservation.getDate());
                    } else {//Delete old reservation
                        ReservationQueries.deleteReservation(reservation);
                    }
                }
            }

            addDropJLabel.setText("Room " + roomName + " was deleted from database.");
        } catch (SQLException ex) {
            Logger.getLogger(RoomSchedulerJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_dropRoomJButtonActionPerformed
    //A function to add a reservation to a waitlist
    private void addToWaitingList(ReservationEntry reservation) {
        WaitlistQueries newWaitlist = null;
        try {
            newWaitlist = new WaitlistQueries(new WaitlistEntry(reservation.getFaculty(), reservation.getDate(),
                    reservation.getSeats(), reservation.getTimestamp()));
            newWaitlist.applyWaitlist();
        } catch (SQLException ex) {
            Logger.getLogger(RoomSchedulerJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //A function to create a new reservation AND return true if it did.
    private boolean createNewReservation(ReservationEntry entry) {

        String room = getBestFitRoom(entry.getSeats(), entry.getDate());
        if (room == null) {
            return false;
        }
        int bestSeats = RoomQueries.getSeats(room);
        ReservationQueries newRes = new ReservationQueries(
                new ReservationEntry(entry.getFaculty(), room, entry.getDate(), bestSeats, entry.getTimestamp()));
        try {
            newRes.applyReservation();
            return true;
        } catch (SQLException ex) {
            Logger.getLogger(RoomSchedulerJFrame.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }

    private String getBestFitRoom(int seats, Date date) {
        try {
            ArrayList<RoomEntry> roomList = RoomQueries.getAllPossibleRooms();
            for (RoomEntry roomEntry : roomList) {
                if (roomEntry.getSeats() >= seats && !ReservationQueries.reservationExists(date, roomEntry.getRoomName())) {
                    return roomEntry.getRoomName();
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(RoomSchedulerJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    //A function to add columns to a tables. roomExists = true for reservation table, = false for waitlist table.
    private void addColumnsToTable(DefaultTableModel model, boolean roomExist) {
        model.addColumn("Faculty");
        if (roomExist) {
            model.addColumn("Rooms");
        }
        model.addColumn("Date");
        model.addColumn("Seats");
        model.addColumn("Timestamp");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(RoomSchedulerJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RoomSchedulerJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDateJButton;
    private javax.swing.JLabel addDateJLable;
    private javax.swing.JLabel addDropJLabel;
    private javax.swing.JButton addFacultyButton;
    private javax.swing.JTextField addFacultyNameTextField;
    private javax.swing.JLabel addFacultyStatusLabel;
    private javax.swing.JButton addRoomJButton;
    private javax.swing.JButton cancelReservationJButton;
    private javax.swing.JSpinner dateJSpinner;
    private javax.swing.JButton dropRoomJButton;
    private javax.swing.JComboBox<String> dropRoomJComboBox;
    private javax.swing.JButton facultyStatusJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable reservationFacultyJTable;
    private javax.swing.JButton reservationStatusButton;
    private javax.swing.JComboBox<String> reservationStatusComboBox;
    private javax.swing.JTable reservationStatusTable;
    private javax.swing.JTextField roomNameTextField;
    private javax.swing.JComboBox<String> roomReservationDateComboBox;
    private javax.swing.JComboBox<String> roomReservationFacultyComboBox;
    private javax.swing.JLabel roomReservationLabel;
    private javax.swing.JTextField roomReservationSeatsTextField;
    private javax.swing.JButton roomReservationSubmitButton;
    private javax.swing.JTextField roomSeatsTextField;
    private javax.swing.JComboBox<String> statusFacultyJComboBox;
    private javax.swing.JTable waitlistFacultyJTable;
    private javax.swing.JButton waitlistStatusButton;
    private javax.swing.JTable waitlistStatusTable;
    // End of variables declaration//GEN-END:variables

}
